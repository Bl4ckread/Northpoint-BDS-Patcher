using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using SSEForms = Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Noggog;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;

namespace NorthpointBDSPatcher
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        static public Settings settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetTypicalOpen(GameRelease.SkyrimSE, "BDSPatcher.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .Run(args);
        }

        private static readonly ModKey USSEPModKey = ModKey.FromNameAndExtension("Unofficial Skyrim Special Edition Patch.esp");
        private static readonly ModKey BDSModKey = ModKey.FromNameAndExtension("Better Dynamic Snow.esp");
        private static readonly ModKey NorthpointModKey = ModKey.FromNameAndExtension("Northpoint.esp");

        private static IReadOnlyDictionary<IFormLinkGetter<IMaterialObjectGetter>, IMaterialObjectGetter> MaterialMapping(ISkyrimModGetter bds, ISkyrimModGetter np)
        {
            Dictionary<IFormLinkGetter<IMaterialObjectGetter>, IMaterialObjectGetter> mappings = new();
            IMaterialObjectGetter? material;
            IMaterialObjectGetter? original;

            // IANPSnowMaterialObject1PBright
            if (bds.MaterialObjects.TryGetValue<IMaterialObjectGetter>(BDSModKey.MakeFormKey(0x1305), out material) 
                && np.MaterialObjects.TryGetValue<IMaterialObjectGetter>(NorthpointModKey.MakeFormKey(0x3e41), out original))
            {
                mappings.Add(original.AsLinkGetter(), material);
            }
            // IANPSnowMaterialObject1PBrightBluish
            if (bds.MaterialObjects.TryGetValue<IMaterialObjectGetter>(BDSModKey.MakeFormKey(0x1305), out material)
                && np.MaterialObjects.TryGetValue<IMaterialObjectGetter>(NorthpointModKey.MakeFormKey(0x3e3f), out original))
            {
                mappings.Add(original.AsLinkGetter(), material);
            }
            // IANPSnowMaterialObject1PBrightLess
            if (bds.MaterialObjects.TryGetValue<IMaterialObjectGetter>(BDSModKey.MakeFormKey(0x1305), out material)
                && np.MaterialObjects.TryGetValue<IMaterialObjectGetter>(NorthpointModKey.MakeFormKey(0x3e40), out original))
            {
                mappings.Add(original.AsLinkGetter(), material);
            }
            // IANPSnowMaterialObject1PPlateau
            if (bds.MaterialObjects.TryGetValue<IMaterialObjectGetter>(BDSModKey.MakeFormKey(0x1305), out material)
                && np.MaterialObjects.TryGetValue<IMaterialObjectGetter>(NorthpointModKey.MakeFormKey(0x3e3e), out original))
            {
                mappings.Add(original.AsLinkGetter(), material);
            }

            return mappings;
        }
        private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? _state;
        internal static IPatcherState<ISkyrimMod, ISkyrimModGetter> State
        {
            get { return _state!; }
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            _state = state;
            if (!state.LoadOrder.TryGetValue(BDSModKey, out IModListing<ISkyrimModGetter>? bdsMod) || bdsMod == null || bdsMod.Mod == null)
            {
                throw new ArgumentException("Unable to get Better Dynamic Snow.esp plugin");
            }
            if (!state.LoadOrder.TryGetValue(NorthpointModKey, out IModListing<ISkyrimModGetter>? npMod) || npMod == null || npMod.Mod == null)
            {
                throw new ArgumentException("Unable to get Northpoint.esp plugin");
            }
            var materialMapping = MaterialMapping(bdsMod.Mod, npMod.Mod);
            var skipMods = Implicits.Get(state.PatchMod.GameRelease).Listings.ToHashSet();
            skipMods.Add(USSEPModKey);

            var getters = state.LoadOrder.PriorityOrder.WinningOverrides<IStaticGetter>();
            Console.WriteLine("{0} STAT", getters.Count<IStaticGetter>());
            // skip STATs where winning override is from excluded mods,or NIF is blacklisted
            foreach (var target in getters)
            {
                if (target.Model != null && target.Model.File != null)
                {
                    if (!settings.IsNifValid(target.Model.File))
                    {
                        Console.WriteLine("Skip blacklisted NIF {0} for STAT {1}:{2}/{3:X8}",
                            target.Model.File, target.FormKey.ModKey.FileName,
                            target.EditorID, target.FormKey.ID);
                        continue;
                    }
                }
                // we need to introspect the provenance of the record
                var contexts = state.LinkCache.ResolveAllContexts<IStatic, IStaticGetter>(target.FormKey).ToList();
                var currentWinner = contexts[0];
                // Do not patch winning override from game files or USSEP
                if (skipMods.Contains(currentWinner.ModKey))
                {
                    Console.WriteLine("Skip STAT {0}/{1:X8} with winning override in '{2}'",
                        target.EditorID, target.FormKey.ID, target.FormKey.ModKey.FileName);
                    continue;
                }

                // Check whether we want to force override with a trusted mod's snow MATO
                var trueContext = settings.CheckTrusted(contexts, target, out var trusted, out var filename);
                var trueWinner = trueContext.Record;
                if (trusted)
                {
                    // Use trusted mod MATO. If it's the winning override then no-op, to avoid ITPO.
                    if (trueContext != currentWinner)
                    {
                        Console.WriteLine("Force-promote STAT {0}:{1}/{2:X8} from trusted mod '{3}'",
                            trueContext.ModKey.FileName, trueWinner.EditorID, trueWinner.FormKey.ID, filename);
                        state.PatchMod.Statics.GetOrAddAsOverride(trueWinner);
                    }
                    else
                    {
                        Console.WriteLine("STAT {0}:{1}/{2:X8} from trusted mod '{3}' is already the winning override",
                            trueWinner.FormKey.ModKey.FileName, trueWinner.EditorID, trueWinner.FormKey.ID, filename);
                    }
                    continue;
                }
                else
                {
                    // MATO mapping may be required
                    if (!materialMapping.TryGetValue(trueWinner.Material, out IMaterialObjectGetter? mapped) || mapped == null)
                    {
                        continue;
                    }
                    var newStatic = state.PatchMod.Statics.GetOrAddAsOverride(trueWinner);
                    var matName = trueContext.Record.Material;
                    Console.WriteLine("MATO {0:X8} mapped to BDS {1:X8} in STAT {2}:{3}/{4:X8}",
                        matName.FormKey.ID, mapped.FormKey.ID, trueWinner.FormKey.ModKey.FileName, trueWinner.EditorID, trueWinner.FormKey.ID);
                    newStatic.Material = new FormLink<IMaterialObjectGetter>(mapped.FormKey);
                }
            }
        }
    }
}
